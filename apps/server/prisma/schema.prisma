// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// === U≈æivatelsk√© modely ===
model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  role      String   @default("MEMBER") // Enum as string
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Team panel relations
  createdTasks    Task[]    @relation("TaskCreator")
  assignedTasks   Task[]    @relation("TaskAssignee")
  createdEvents   Event[]   @relation("EventCreator")
  createdExpenses Expense[] @relation("ExpenseCreator")

  // Blog system relations
  articles              Article[]              @relation("AuthoredArticles")
  comments              Comment[]              @relation("AuthoredComments")
  articleLikes          ArticleLike[]          @relation("UserArticleLikes")
  commentLikes          CommentLike[]          @relation("UserCommentLikes")
  bookmarks             Bookmark[]             @relation("UserBookmarks")
  newsletterSubscriptions NewsletterSubscription[] @relation("NewsletterSubscriptions")

  @@map("users")
}

// === T√Ωmov√Ω panel modely ===
model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      String     @default("TODO") // Enum as string
  priority    String     @default("MEDIUM") // Enum as string
  position    Int        @default(0)
  columnId    String
  createdById String
  assigneeId  String?
  projectId   String?
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relace
  createdBy User     @relation("TaskCreator", fields: [createdById], references: [id], onDelete: Cascade)
  assignee  User?    @relation("TaskAssignee", fields: [assigneeId], references: [id])
  project   Project? @relation(fields: [projectId], references: [id])
  column    Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Column {
  id       String @id @default(cuid())
  title    String
  position Int    @default(0)
  color    String @default("#3b82f6")

  // Relace
  tasks Task[]

  @@map("columns")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relace
  tasks Task[]

  @@map("projects")
}

// === Kalend√°≈ô modely ===
model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  start       DateTime
  end         DateTime?
  allDay      Boolean  @default(false)
  color       String   @default("#3b82f6")
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relace
  createdBy User @relation("EventCreator", fields: [createdById], references: [id], onDelete: Cascade)

  @@map("events")
}

// === V√Ωdaje modely ===
model Expense {
  id          String   @id @default(cuid())
  title       String
  description String?
  amount      Float
  currency    String   @default("CZK")
  date        DateTime
  categoryId  String
  createdById String
  receipt     String?
  status      String   @default("PENDING") // Enum as string
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relace
  createdBy User            @relation("ExpenseCreator", fields: [createdById], references: [id], onDelete: Cascade)
  category  ExpenseCategory @relation(fields: [categoryId], references: [id])

  @@map("expenses")
}

model ExpenseCategory {
  id    String @id @default(cuid())
  name  String
  color String @default("#3b82f6")
  icon  String @default("üí∞")

  // Relace
  expenses Expense[]

  @@map("expense_categories")
}

// === CMS modely pro spr√°vu webu ===
model SiteSettings {
  id            String  @id @default("site_settings")
  heroTitle     String  @default("V√≠tejte v Madzone")
  heroSubtitle  String  @default("Modern√≠ platforma pro ud√°losti a komunitu")
  primaryColor  String  @default("#3b82f6")
  logoUrl       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("site_settings")
}

model SocialLink {
  id       String @id @default(cuid())
  platform String
  url      String
  order    Int    @default(0)

  @@map("social_links")
}

// === Blog System ===
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  color       String?   @default("#EF4444") // Red color as default
  icon        String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  articles Article[]

  @@map("categories")
}

model Article {
  id          String        @id @default(cuid())
  title       String
  slug        String        @unique
  content     String
  excerpt     String?
  coverImage  String?
  authorId    String
  categoryId  String
  status      String        @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
  featured    Boolean       @default(false)
  views       Int           @default(0)
  readTime    Int?          // in minutes
  publishedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  author    User          @relation("AuthoredArticles", fields: [authorId], references: [id])
  category  Category      @relation(fields: [categoryId], references: [id])
  tags      ArticleTag[]
  comments  Comment[]
  likes     ArticleLike[]
  bookmarks Bookmark[]

  @@map("articles")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())

  articles ArticleTag[]

  @@map("tags")
}

model ArticleTag {
  articleId String
  tagId     String

  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([articleId, tagId])
  @@map("article_tags")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  articleId String
  parentId  String?  // For nested comments
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author   User          @relation("AuthoredComments", fields: [authorId], references: [id])
  article  Article       @relation(fields: [articleId], references: [id], onDelete: Cascade)
  parent   Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[]     @relation("CommentReplies")
  likes    CommentLike[]

  @@map("comments")
}

model ArticleLike {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  createdAt DateTime @default(now())

  user    User    @relation("UserArticleLikes", fields: [userId], references: [id], onDelete: Cascade)
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId])
  @@map("article_likes")
}

model CommentLike {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())

  user    User    @relation("UserCommentLikes", fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@map("comment_likes")
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  createdAt DateTime @default(now())

  user    User    @relation("UserBookmarks", fields: [userId], references: [id], onDelete: Cascade)
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId])
  @@map("bookmarks")
}

// Newsletter System
model NewsletterSubscription {
  id        String   @id @default(cuid())
  email     String   @unique
  userId    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation("NewsletterSubscriptions", fields: [userId], references: [id])

  @@map("newsletter_subscriptions")
}

// Location System (for the map)
model Location {
  id          String        @id @default(cuid())
  name        String
  description String?
  address     String?
  latitude    Float
  longitude   Float
  region      String?
  status      String        @default("PLANNED") // PLANNED, VISITED, IN_PROGRESS
  difficulty  String        @default("MEDIUM")  // LOW, MEDIUM, HIGH
  visitedAt   DateTime?
  images      String[]      // Array of image URLs
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  expeditions Expedition[]

  @@map("locations")
}

model Expedition {
  id          String   @id @default(cuid())
  locationId  String
  title       String
  description String?
  date        DateTime
  duration    Int?     // in hours
  teamSize    Int?
  equipment   String[] // Array of equipment used
  findings    String?  // JSON string of findings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  location Location @relation(fields: [locationId], references: [id])

  @@map("expeditions")
}

// === Casbin RBAC modely ===
model CasbinRule {
  id    Int    @id @default(autoincrement())
  ptype String
  v0    String?
  v1    String?
  v2    String?
  v3    String?
  v4    String?
  v5    String?

  @@map("casbin_rule")
}
